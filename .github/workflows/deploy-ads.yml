name: EBS Deployment

on:
  workflow_dispatch:
    inputs:
      Build_no:
        description: Build id / build run number
        required: true

env:
  # Static / migrated ADO variable equivalents (override in repo or add to workflow_dispatch inputs)
  BASE_PATH: "/u01/buildsrv/EBSHOME_github"
  LIVE: Demo                # <- set to your runtime folder name
  Build_no: ${{ inputs.Build_no }}
  Deployment_no : ${{ github.run_number }}
  REQUESTED_FOR: ${{ github.actor }}
  REQUESTED_FOR_EMAIL: "abcd@abcd.com"    # Not directly available in GitHub; supply via secret or input if needed
  GIT_AUTHOR_NAME: github-actions
  GIT_AUTHOR_EMAIL: actions@users.noreply.github.com

jobs:  
  # Stage 2: EBSSIT Environment
  deploy-EBSSIT:
    name: EBSSIT
    runs-on: LTIM-buildsrv
    environment: EBSSIT
    if: github.event.inputs.environment == 'EBSSIT' || github.ref == 'refs/heads/develop'
    
    env:
      ENVIRONMENT_NAME: EBSSIT
    
    steps:        
    - name: Deploy to ${{ env.ENVIRONMENT_NAME }}
      run: |
        python3 "${{ env.BASE_PATH }}/Automation_Scripts/${{ env.LIVE }}/Transfer_Deploy.py" "$ENVIRONMENT_NAME" "${{ env.Build_no }}"
    
    - name: Display Deployment Log
      if: always()
      run: |
        cat "${{ env.BASE_PATH }}/log_files/deployment.log"
    
    - name: Display LDT Logs
      if: always()
      run: |
        cat "${{ env.BASE_PATH }}/log_files/ldt_deployment.log"
    
    - name: Catch Deployment Errors
      if: always()
      run: |
        python3 "${{ env.BASE_PATH }}/Automation_Scripts/${{ env.LIVE }}/Catch_deployment_error.py"

    - name: Extract and update 
      run: |
        python3 "${{ github.workspace }}/Automation_Scripts/extract.py" \
          BUILD \
          "${{ env.Build_no }}" \
          "${{ github.workflow }}" \
          "${{ github.run_number }}" \
          "${{ github.actor }}" \
          "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
          "${{ "$ENVIRONMENT_NAME" }}" \
          "${{ vars.USER_EMAIL || 'noreply@github.com' }}" \
          "${{ github.triggering_actor }}" \
          "${{ vars.DEPLOYMENT_EMAIL || 'noreply@github.com' }}"


  deploy-EBSUAT:
    name: EBSUAT
    runs-on: LTIM-buildsrv
    needs: [deploy-EBSSIT]
    environment: EBSUAT
    if: github.event.inputs.environment == 'EBSUAT' || github.ref == 'refs/heads/develop'
    
    env:
      ENVIRONMENT_NAME: EBSUAT
    
    steps:        
    - name: Deploy to ${{ env.ENVIRONMENT_NAME }}
      run: |
        python3 "${{ env.BASE_PATH }}/Automation_Scripts/${{ env.LIVE }}/Transfer_Deploy.py" "$ENVIRONMENT_NAME" "${{ env.Build_no }}"
    
    - name: Display Deployment Log
      if: always()
      run: |
        cat "${{ env.BASE_PATH }}/log_files/deployment.log"
    
    - name: Display LDT Logs
      if: always()
      run: |
        cat "${{ env.BASE_PATH }}/log_files/ldt_deployment.log"
    
    - name: Catch Deployment Errors
      if: always()
      run: |
        python3 "${{ env.BASE_PATH }}/Automation_Scripts/${{ env.LIVE }}/Catch_deployment_error.py"


  deploy-EBSPROD:
    name: EBSPROD
    runs-on: LTIM-buildsrv
    needs: [deploy-EBSUAT]
    environment: EBSPROD
    if: github.event.inputs.environment == 'EBSPROD' || github.ref == 'refs/heads/develop'
    
    env:
      ENVIRONMENT_NAME: EBSPROD
    
    steps:        
    - name: Deploy to ${{ env.ENVIRONMENT_NAME }}
      run: |
        python3 "${{ env.BASE_PATH }}/Automation_Scripts/${{ env.LIVE }}/Transfer_Deploy.py" "$ENVIRONMENT_NAME" "${{ env.Build_no }}"
    
    - name: Display Deployment Log
      if: always()
      run: |
        cat "${{ env.BASE_PATH }}/log_files/deployment.log"
    
    - name: Display LDT Logs
      if: always()
      run: |
        cat "${{ env.BASE_PATH }}/log_files/ldt_deployment.log"
    
    - name: Catch Deployment Errors
      if: always()
      run: |
        python3 "${{ env.BASE_PATH }}/Automation_Scripts/${{ env.LIVE }}/Catch_deployment_error.py"

