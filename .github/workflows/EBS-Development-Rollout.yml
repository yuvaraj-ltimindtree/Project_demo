name: EBS Development Rollout

on:
  workflow_dispatch:
    inputs:
      Jira_No:
        description: Jira ticket number
        required: true
      FileNames:
        description: Comma separated file names
        required: false
      CUSTOM_TOP:
        description: Custom top value
        required: true
        default: $XXDEMO_TOP
        type: choice
        options:
        - $XXDEMO_TOP
        - $XXDEMOC_TOP
      Repo_Directory:
        description: directory path in repository 
        required: true

env:
  # Static / migrated ADO variable equivalents (override in repo or add to workflow_dispatch inputs)
  BASE_PATH: "/u01/buildsrv/EBSHOME"
  LIVE: Github_Demo                # <- set to your runtime folder name
  CUSTOM_TOP: ${{ inputs.CUSTOM_TOP }}
  FileNames: ${{ inputs.FileNames }}
  Jira_No: ${{ inputs.Jira_No }}
  Repo_Directory: ${{ inputs.Repo_Directory }}
  BUILD_NUMBER: ${{ github.run_number }}
  REQUESTED_FOR: ${{ github.actor }}
  REQUESTED_FOR_EMAIL: "abcd@abcd.com"    # Not directly available in GitHub; supply via secret or input if needed
  GIT_AUTHOR_NAME: github-actions
  GIT_AUTHOR_EMAIL: actions@users.noreply.github.com

jobs:
  ebs-build:
    name: EBS-Build
    runs-on: LTIM-buildsrv

    steps:
      - name: Checkout (develop)
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0   # get tags
          fetch-tags: true
      - name: Converting User Input to CSV file
        run: |
          mkdir -p "$BASE_PATH/csv_files"
          python - <<'PY'
          import csv, os
          base = os.environ["BASE_PATH"]
          path = os.path.join(base, "csv_files", "build_user_input.csv")
          header = ["Build_no","Repo_Directory","Jira_No","FileNames","Custom_Top"]
          row = {
            "Build_no": os.environ.get("BUILD_NUMBER",""),
            "Repo_Directory": os.environ.get("Repo_Directory",""),
            "Jira_No": os.environ.get("Jira_No",""),
            "FileNames": os.environ.get("FileNames",""),
            "Custom_Top": os.environ.get("CUSTOM_TOP","")
          }
            # append (no header to mimic original a+)
          with open(path,'a+', newline='') as f:
              w = csv.DictWriter(f, fieldnames=header)
              w.writerow(row)
          PY

      - name: File check
        run: |
          python3 "$BASE_PATH/Automation_Scripts/$LIVE/duplicate_check.py" BUILD "$BUILD_NUMBER" "$REQUESTED_FOR" "$REQUESTED_FOR_EMAIL"

      - name: Build Details
        run: |
          python3 "$BASE_PATH/Automation_Scripts/$LIVE/build_details.py" "$BUILD_NUMBER"

      - name: Branch Checking (must be develop)
        run: |
          echo "Current branch: ${GITHUB_REF_NAME}"
          if [ "${GITHUB_REF_NAME}" != "develop" ]; then
            echo "ERROR: Build must run from 'develop' branch"; exit 1;
          fi

      - name: Trigger Python Script for Package Building
        run: |
          python3 "$BASE_PATH/Automation_Scripts/$LIVE/main.py" BUILD "$BUILD_NUMBER"

      - name: Upload Repo Snapshot Artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-snapshot
          path: .

      - name: Summary
        run: |
          echo "Build Number: $BUILD_NUMBER"
          echo "Jira: $Jira_No"
          echo "Repo_Directory: $Repo_Directory"
          echo "Files: $FileNames"
  
  # Stage 2: EBSSIT Environment
  deploy-EBSSIT:
    name: EBSSIT
    runs-on: LTIM-buildsrv
    needs: [ebs-build]
    environment: EBSSIT
    if: github.event.inputs.environment == 'EBSSIT' || github.ref == 'refs/heads/main'
    
    env:
      ENVIRONMENT_NAME: EBSSIT
    
    steps:        
    - name: Deploy to ${{ env.ENVIRONMENT_NAME }}
      run: |
        python3 "${{ env.BASE_PATH }}/Automation_Scripts/${{ env.LIVE }}/Transfer_Deploy.py" "$ENVIRONMENT_NAME" "$BUILD_NUMBER"
    
    - name: Display Deployment Log
      if: always()
      run: |
        cat "${{ env.BASE_PATH }}/log_files/deployment.log"
    
    - name: Display LDT Logs
      if: always()
      run: |
        cat "${{ env.BASE_PATH }}/log_files/ldt_deployment.log"
    
    - name: Catch Deployment Errors
      if: always()
      run: |
        python3 "${{ env.BASE_PATH }}/Automation_Scripts/${{ env.LIVE }}/Catch_deployment_error.py"

  deploy-EBSUAT:
    name: EBSUAT
    runs-on: LTIM-buildsrv
    needs: [deploy-EBSSIT]
    environment: EBSUAT
    if: github.event.inputs.environment == 'EBSUAT' || github.ref == 'refs/heads/main'
    
    env:
      ENVIRONMENT_NAME: EBSUAT
    
    steps:        
    - name: Deploy to ${{ env.ENVIRONMENT_NAME }}
      run: |
        python3 "${{ env.BASE_PATH }}/Automation_Scripts/${{ env.LIVE }}/Transfer_Deploy.py" "$ENVIRONMENT_NAME" "$BUILD_NUMBER"
    
    - name: Display Deployment Log
      if: always()
      run: |
        cat "${{ env.BASE_PATH }}/log_files/deployment.log"
    
    - name: Display LDT Logs
      if: always()
      run: |
        cat "${{ env.BASE_PATH }}/log_files/ldt_deployment.log"
    
    - name: Catch Deployment Errors
      if: always()
      run: |
        python3 "${{ env.BASE_PATH }}/Automation_Scripts/${{ env.LIVE }}/Catch_deployment_error.py"


  deploy-EBSPROD:
    name: EBSPROD
    runs-on: LTIM-buildsrv
    needs: [deploy-EBSUAT]
    environment: EBSPROD
    if: github.event.inputs.environment == 'EBSPROD' || github.ref == 'refs/heads/main'
    
    env:
      ENVIRONMENT_NAME: EBSPROD
    
    steps:        
    - name: Deploy to ${{ env.ENVIRONMENT_NAME }}
      run: |
        python3 "${{ env.BASE_PATH }}/Automation_Scripts/${{ env.LIVE }}/Transfer_Deploy.py" "$ENVIRONMENT_NAME" "$BUILD_NUMBER"
    
    - name: Display Deployment Log
      if: always()
      run: |
        cat "${{ env.BASE_PATH }}/log_files/deployment.log"
    
    - name: Display LDT Logs
      if: always()
      run: |
        cat "${{ env.BASE_PATH }}/log_files/ldt_deployment.log"
    
    - name: Catch Deployment Errors
      if: always()
      run: |
        python3 "${{ env.BASE_PATH }}/Automation_Scripts/${{ env.LIVE }}/Catch_deployment_error.py"


  notify-completion:
    name: Notify Deployment Completion
    runs-on: LTIM-buildsrv
    needs: [deploy-EBSSIT,deploy-EBSUAT]
    if: always()
    
    steps:
    - name: Deployment Status
      run: |
        echo "Deployment pipeline completed"
        echo "SIT Status: ${{ needs.deploy-sit.result }}"
        echo "UAT Status: ${{ needs.deploy-uat.result }}"
        echo "PROD Status: ${{ needs.deploy-prod.result }}"


